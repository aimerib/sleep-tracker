#!/usr/bin/env bash

trap "exit" INT TERM ERR
trap "kill 0" EXIT

local_dev(){
  docker run --rm -p 5432:5432 -v \
  sleeptracker-data:/var/lib/postgresql/data \
  -e POSTGRES_PASSWORD=postgres --name sleep_tracker_db postgres 2> /dev/null &
  
  # shellcheck disable=SC1091
  source ./grimoire
  if iex -S mix phx.server; then
    docker stop sleep_tracker_db &> /dev/null
    exit 0;
  fi;
  docker stop sleep_tracker_db &> /dev/null
  echo "Something went wrong. Exiting development mode."
  exit 1;
}

start_wizard(){
  echo "Starting wizard"
  docker run --rm -d -p 5432:5432 -v \
  sleeptracker-data:/var/lib/postgresql/data \
  -e POSTGRES_PASSWORD=postgres --name sleep_tracker_db postgres &> /dev/null
  # shellcheck disable=SC1091
  source ./grimoire
  if _build/prod/rel/sleep_tracker/bin/sleep_tracker daemon; then
    echo "Wizard summoned."
    echo "Visit http://localhost:4000 to start using it"
    exit 0
  fi;
  docker stop sleep_tracker_db &> /dev/null
  echo "Something went wrong while summoning the Wizard. Please pray harder."
  exit 1
}

stop_wizard(){
  echo "Stopping wizard"
  docker stop sleep_tracker_db &> /dev/null
  if ./_build/prod/rel/sleep_tracker/bin/sleep_tracker pid &> /dev/null; then
    ./_build/prod/rel/sleep_tracker/bin/sleep_tracker stop
  fi;
  echo "Wizard stopped"
}


reset_db(){
  docker run --rm -p 5432:5432 -v \
  sleeptracker-data:/var/lib/postgresql/data \
  -e POSTGRES_PASSWORD=postgres --name sleep_tracker_db postgres 2> /dev/null &
  # shellcheck disable=SC1091
  source ./grimoire
  if mix ecto.drop && mix ecto.setup; then
    docker stop sleep_tracker_db &> /dev/null
    exit 0;
  fi;
  docker stop sleep_tracker_db &> /dev/null
  echo "Something went wrong. Exiting development mode."
  exit 1;
}

run_migrations(){
  docker run --rm -p 5432:5432 -v \
  sleeptracker-data:/var/lib/postgresql/data \
  -e POSTGRES_PASSWORD=postgres --name sleep_tracker_db postgres 2> /dev/null &
  # shellcheck disable=SC1091
  source ./grimoire
  if mix ecto.migrate; then
    docker stop sleep_tracker_db &> /dev/null
    exit 0;
  fi;
  docker stop sleep_tracker_db &> /dev/null
  echo "Something went wrong. Exiting development mode."
  exit 1;
}

run_tests_one_at_time(){
  docker run --rm -p 5432:5432 -v \
  sleeptracker-test-data:/var/lib/postgresql/data \
  -e POSTGRES_PASSWORD=postgres --name sleep_tracker_test_db postgres 2> /dev/null &
  # shellcheck disable=SC1091
  source ./grimoire
  mix ecto.drop &> /dev/null && mix ecto.setup &> /dev/null
  if mix test --max-failures 1; then
    docker stop sleep_tracker_test_db &> /dev/null
    exit 0;
  fi;
  docker stop sleep_tracker_test_db &> /dev/null
  echo "Something went wrong. Exiting development mode."
  exit 1;
}

run_tests_once(){
  docker run --rm -p 5432:5432 -v \
  sleeptracker-test-data:/var/lib/postgresql/data \
  -e POSTGRES_PASSWORD=postgres --name sleep_tracker_test_db postgres 2> /dev/null &
  # shellcheck disable=SC1091
  source ./grimoire
  mix ecto.drop &> /dev/null && mix ecto.setup &> /dev/null
  if mix test; then
    docker stop sleep_tracker_test_db &> /dev/null
    exit 0;
  fi;
  docker stop sleep_tracker_test_db &> /dev/null
  echo "Something went wrong. Exiting development mode."
  exit 1;
}

watch_tests(){
  docker run --rm -p 5432:5432 -v \
  sleeptracker-test-data:/var/lib/postgresql/data \
  -e POSTGRES_PASSWORD=postgres --name sleep_tracker_test_db postgres 2> /dev/null &
  # shellcheck disable=SC1091
  source ./grimoire
  mix ecto.drop &> /dev/null && mix ecto.setup &> /dev/null
  if mix test.watch; then
    docker stop sleep_tracker_db &> /dev/null
    exit 0;
  fi;
  docker stop sleep_tracker_test_db &> /dev/null
  echo "Something went wrong. Exiting development mode."
  exit 1;
}

# SSH_STRING_SLEEPTRACKER
# export SSH_STRING_SLEEPTRACKER=user@server -i ~/.ssh/privatekey
remote_terminal(){
  ssh -tt $SSH_STRING_SLEEPTRACKER "/bin/bash -c 'docker-compose -f \
  /app/docker-compose.yml exec app /bin/bash /app/bin/sleep_tracker remote'"
}

usage(){
  echo -e "Available commands: \\n\\n" \
  "dev             - Start local development environment. \\n" \
  "test            - Runs test suite \\n" \
  "defend          - Watches files for any changes and runs tests for those files \\n" \
  "dbreset         - Drops current db and recreates it. \\n" \
  "dbmigrate       - Runs ecto migrations \\n" \
  "summon          - Start Wizard \\n" \
  "prepare         - Prepare the system for magic"
}

graceful_exit() {
  # from: https://gist.github.com/mrbar42/529cf0db529c0408ba1ef414653becdd
  # include this line: trap graceful_exit TERM INT HUP
  local timeout=${1:-4}
  local list=""
  for c in $(ps -o pid= --ppid $$); do
    # request children shutdown
    kill -0 "$c" 2>/dev/null && kill -TERM "$c" && list="$list $c" #|| true
  done
  if [ -n "$list" ]; then
    # schedule hard kill after timeout
    (sleep "$timeout"; kill -9 "$list" 2>/dev/null || true) &
    local killer=$!
    wait "$list" 2>/dev/null || true
    # children exited gracfully - cancel timer
    sleep 0.5 && kill -9 "$killer" 2>/dev/null && list=""
  fi
  
  [ -z "$list" ] && exit 0 || echo "Something went wrong." && exit 1
}
# this line exectues when process exits
trap 'graceful_exit 5' TERM INT HUP

if [[ "$#" -gt 0 ]]; then
  case $1 in
    dev)              local_dev;;
    dbreset)          reset_db;;
    dbmigrate)        run_migrations;;
    tests)             run_tests_once;;
    test)             run_tests_once;;
    remote_terminal)  remote_terminal;;
    defend)           watch_tests;;
    summon)           start_wizard;;
    seal)             stop_wizard;;
    *)                usage;;
  esac
else usage
fi


